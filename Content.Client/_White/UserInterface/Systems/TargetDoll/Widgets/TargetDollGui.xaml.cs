using Content.Shared._White.TargetDoll;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._White.UserInterface.Systems.TargetDoll.Widgets;

[GenerateTypedNameReferences]
public sealed partial class TargetDollGui : UIWidget
{
    private readonly Dictionary<BodyPart, Texture?> _bodyPartTextures;

    public TargetDollGui()
    {
        RobustXamlLoader.Load(this);
        LayoutContainer.SetGrowVertical(this, LayoutContainer.GrowDirection.Begin);

        var controller = UserInterfaceManager.GetUIController<TargetDollUIController>();

        _bodyPartTextures = new Dictionary<BodyPart, Texture?>();
        Dictionary<BodyPart, TextureButton> bodyPartButtons = new()
        {
            { BodyPart.Head, Control.HeadButton },
            { BodyPart.Chest, Control.ChestButton },
            { BodyPart.Groin, Control.GroinButton },
            { BodyPart.RightArm, Control.RightArmButton },
            { BodyPart.RightHand, Control.RightHandButton },
            { BodyPart.LeftArm, Control.LeftArmButton },
            { BodyPart.LeftHand, Control.LeftHandButton },
            { BodyPart.RightLeg, Control.RightLegButton },
            { BodyPart.RightFoot, Control.RightFootButton },
            { BodyPart.LeftLeg, Control.LeftLegButton },
            { BodyPart.LeftFoot, Control.LeftFootButton },
            { BodyPart.Eyes, Control.EyesButton },
            { BodyPart.Mouth, Control.MouthButton },
            { BodyPart.Tail, Control.TailButton },
        };

        foreach (var bodyPartButton in bodyPartButtons)
        {
            var bodyPartName = Enum.GetName(typeof(BodyPart), bodyPartButton.Key) ?? "Unknown";

            bodyPartButton.Value.MouseFilter = MouseFilterMode.Stop;
            bodyPartButton.Value.OnPressed += _ => controller.CycleTarget(bodyPartButton.Key);
            bodyPartButton.Value.OnMouseEntered += _ => Control.TextureFocused =
                Theme.ResolveTexture($"TargetDoll/{bodyPartName.ToLowerInvariant()}_hover");
            bodyPartButton.Value.OnMouseExited += _ => Control.TextureFocused = null;

            _bodyPartTextures[bodyPartButton.Key] =
                Theme.ResolveTexture($"TargetDoll/{bodyPartName.ToLowerInvariant()}");
        }

        TargetDollTexture.Texture = Theme.ResolveTexture("target_doll");
    }

    protected override void OnThemeUpdated() => TargetDollTexture.Texture = Theme.ResolveTexture("target_doll");

    public void SetBodyPartsVisible(BodyPart bodyPart) => Control.TextureHovered = _bodyPartTextures[bodyPart];

    public void SetTargetDollVisible(bool visible) => Visible = visible;
}
